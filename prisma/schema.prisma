generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model TokenDrawn {
  id                   Int      @id @default(autoincrement())
  name                 String
  symbol               String
  priceAtDrawn         Decimal  @db.Decimal(18, 8)
  createdAt            DateTime @default(now())
  priceAtContest       Decimal  @db.Decimal(18, 8)
  percentageDifference Decimal? @default(0) @db.Decimal(18, 8)
  lastModified         DateTime @updatedAt
  category             String
  timeframe            String
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  pies     Pie[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  stripeCancelled        Boolean?  @map(name: "stripe_cancelled")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Pie {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  target      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  authorId    String

  author User @relation(fields: [authorId], references: [id])

  slices Slice[]

  @@map(name: "pies")
}

model Slice {
  id        Int      @id @default(autoincrement())
  asset     String
  target    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pieId     Int

  pie Pie @relation(fields: [pieId], references: [id])

  @@map(name: "slices")
}
